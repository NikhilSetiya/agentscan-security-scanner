# Multi-stage build for optimized orchestrator container
FROM golang:1.24-alpine AS builder

# Install build dependencies in single layer
RUN apk add --no-cache git ca-certificates tzdata upx

WORKDIR /app

# Copy go mod files first for better layer caching
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Build with aggressive optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -trimpath \
    -o orchestrator ./cmd/orchestrator

# Compress binary with UPX
RUN upx --best --lzma orchestrator

# Final stage - Alpine for Docker CLI support
FROM alpine:3.19

# Install runtime dependencies in single layer
RUN apk --no-cache add \
    ca-certificates \
    tzdata \
    docker-cli \
    && rm -rf /var/cache/apk/*

# Create optimized user and group setup
RUN addgroup -g 1001 -S agentscan && \
    adduser -u 1001 -S agentscan -G agentscan && \
    addgroup agentscan docker

# Create temp directory with proper permissions
RUN mkdir -p /tmp/agentscan && \
    chown -R agentscan:agentscan /tmp/agentscan

WORKDIR /app

# Copy the compressed binary
COPY --from=builder /app/orchestrator .

# Set ownership
RUN chown agentscan:agentscan orchestrator

# Switch to non-root user
USER agentscan

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD ["./orchestrator", "health"]

# Set resource limits via labels
LABEL com.agentscan.resource.memory="512Mi"
LABEL com.agentscan.resource.cpu="500m"

ENTRYPOINT ["./orchestrator"]