# Multi-stage build for optimized API container
FROM golang:1.24-alpine AS builder

# Install build dependencies in single layer
RUN apk add --no-cache git ca-certificates tzdata upx

WORKDIR /app

# Copy go mod files first for better layer caching
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Build with aggressive optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -trimpath \
    -o api ./cmd/api

# Compress binary with UPX
RUN upx --best --lzma api

# Final stage - distroless for minimal attack surface
FROM gcr.io/distroless/static:nonroot

# Copy CA certificates and timezone data
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy the compressed binary
COPY --from=builder /app/api /api

# Health check using the binary itself
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD ["/api", "health"]

EXPOSE 8080

ENTRYPOINT ["/api"]